Netscape  ------ navigator  ----- Livescript
Microsft ------ IE ------- JScript

JAVA

------> ECMA (comunittee)   ---> JS

ES5   - the version whihc gor published in a particular year - 2009
ES6   - 2015
ES7   - 2016


// PRODUCT DEVELOPMENT
1. delivering - (any super deep level is not required)
2. good quality code - 
       a) performance
       b) scalability (customer base) ---- ( no deep level knowledge of a language)
       c) bug free code
       d) extensible ( no deep level knowledge of a language)
3. UX - Design  -------------------------------------
4. App flow


customer
1. UX
2. flow
3. Bug free
4. performance

ADD ---------------- SAVE
------> 1(2) sec delay 30% customers


a. Function scope
b. global scope 
c. block scope

i) var - function scope and global scope
ii) let - function scope and global scope and block scope
iii) const - function scope and global scope and block scope. once we declare a variable with const, the value can never be changed


THIS - refers to the object who has called the function. -- classical functions



ARROW vs CLASSICAL FUNCTIONS
a. syntax
b. "this" keyword works differently
c. call, bind and apply does not work in arrow function
d. arguments is only valid for classical functions



call ---- bind + invokation

call and apply - only differs in the way we pass arguments

closure ----- all the variables of outer fn are still accessible from the returned function


rest operator  ---- ...
spread operator --- ...

spread operator only merges the owned properties, not the inherited

map - we  can modify the value......
filter - we can't modify it, but we can decide whether it needs to be returned or not
some  --- checks for any condition and the return type is a boolean.... checks for the first truthy condition

some ---- checks for "any" condition..... and if it finds the first true as the returned value, the execution stops
every ---- checks for all condition... and and if it finds the first false as the returned value, the execution stops

reduce --- whenever we need to traverse an array and get a particular entity out of it